==============================================
At first,      pip install django==1.9.10     in jupyter notebook.


(1)create a folder that belongs to django's operation envirement.

#for example
>>>mkdir django_project
>>>cd django_project
>>>django-admin startproject bb102final.   
#note: bb102final is the name of upper folder's name. Once created, settings.py would contain this folder'name,so it couldn't be allowed that u edit this folder'name at will.

what we have completed:
django_project
|
|_____manage.py 	 #to let us execute functions, including establishing app, starting up server and shell. 
|_____bb102final  	 #(bb102final is the upper project)
        |
        |___settings.py  #our porject's setting files.
        |___urls.py      #the web address. to let u browse the our html.  
 	|___wsgi.py      #webserver' and django's interface setting.
	| __init__.py     #to let your app become a python package.



==============================================
(2)vim settings.py

(2)-1  database's setting.please edit content as follows:

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
	
    }
}
STATIC_URL = '/static/'

#'db.sqlite3' is the name of db.

(2)-2  loading staticfiles.please edit content as follows:

STATIC_URL = '/static/'

STATICFILES_DIRS = [
os.path.join(BASE_DIR,'static'),
]

(2)-3 edit the time_zone and language_code. please edit content as follows:

LANGUAGE_CODE = 'zh-Hant' #suggested, it means mandarin chiese.

TIME_ZONE = 'Asia/Taipei' #taiwan taipei

USE_I18N = True

USE_L10N = True

USE_TZ = True


(2)-4 add the app u are going to start up in settings.py. please edit content as follows:
 
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'elephant',
]
#elephant is the app i create.
#app's effect is allowing us constructing one specific genre with website,so it's the great idea for u to do so 
if u wanna create many types of website.


(2)-5 templats's setting.please edit content as follows:

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


(2)-6 when uploading your webapp on the cloud, u must turn "DEBUG = False", and it will protect your website.
      however, maintain True  if u are still editting the website.
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True    



==============================================
(3) estblish a framework of db
 
>>> cd django_project/
>>> python manage.py migrate


==============================================

(4)active the operation of webserver

>>> cd django_project/
>>> pytho manage.py runserver 8000

and enter 127.0.0.1:8000, u will see congratulation.

#u can change number when runserver, for example, 8001,8002,8003...,so it will allowed us to run several app at the meantime.


==============================================
(5)start up app

>>>cd django_project/
>>>python manage.py startapp elephant

what we have completed:
django_project
|
|_____manage.py
|_____db.sqlite3
|_____bb102final
|       |
|       |___settings.py
|       |___urls.py
|	|___wsgi.py
|	| __init__.py
|
|
|_____elephant
        |
	|__migrations       #the records. it will help us to synchronize the change of db.sqlite3 between db and apps. 
	    _init_.py
	|__    __init__.py
        |___admin.py	    # to manage accounts and register the class from models.py
        |___models.py       # to create class defining the column of db.sqlite3. 
        |__tests.py          
        |__views.py         # there are full of functions that can control the way of presenting on website. 






==============================================
(6) crate a admin to manage the interface of website's background.

>>>cd django_project/
>>>python manage.py createsuperuser

#after completing it, entering 127.0.0.1:8000/admin, and u will see the management platform.


==============================================
(7) vim models.py. take it for example. class maplist has to be register in admin.py, and u are able to construct the column, the same as db.sqlite3, and sychronize data between db.sqlite3 and app. Of course u don't need to do this if u won't use db.sqlite3.

####
from django.db import models
from django.utils import timezone


# Create your models here.


class maplist(models.Model):						
	mapName = models.CharField(max_length=60, null=False)	
	mapDesc = models.TextField(null=False)	
	mapLat = models.CharField(max_length=20, null=False)
	mapLng =  models.CharField(max_length=20, null=False)	
	mapTel = models.CharField(max_length=20, null=False)
	mapAddr = models.CharField(max_length=60, null=False)

	def __str__(self):		
		return self.mapName	

###

==============================================
(8) vim admin.py to register class in admin.py, and models.py could work for app.
Of course u don't need to do this if u won't use db.sqlite3.



###
from django.contrib import admin
from .models import maplist

# Register your models here.

admin.site.register(maplist)
###
==============================================
(9)after editting the models.py and registering it to admin.py, then we can establish the script for db.sqlite3. script could help us to estblish a "update" framework of db,compared to the framework we construct very before. 
Of course u don't need to do this if u won't use db.sqlite3.


>>> cd django_project/
>>> python manage.py makemigrations   #or >>>python manage.py migrations app's name 
#it will update every apps' migrations if u don't add specific app's name.
>>> python manage.py migrate    #u are able to sychronize content,or models.py between db.sqlite3 and app. 


==============================================

(10) create a folder that helps u to load staticfiles.
>>> cd django_project/elephant
>>> mkdir static
#u are supposed to place any folder concerning css, js, images into this folder.


==============================================




(11)create a folder to place html.
>>> cd django_project/elephant
>>> mkdir templates
>>> cd templates
>>> mkdir elephant  #this way will help differentiates htmls among apps.

==============================================
(12)u can do easy steps to restart django server:

>>> cd django_project/  #at this moment, make sure u see the upper project's foler, for example bb102final, and manage.py
>>> python manage.py runserver 




